generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(cuid())

  firstName String
  lastName  String
  email     String @unique
  password  String

  refreshToken   RefreshToken?
  subscription   Subscription?
  credits        Credits?
  replyFeedbacks ReplyFeedback[]
  feedbacks      Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Subscription {
  id String @id @default(cuid())

  userId               String @unique
  stripeSubscriptionId String @unique
  stripeCustomerId     String
  stripePriceId        String

  plan   PLAN
  status PLAN_STATUS

  startDate        DateTime
  endDate          DateTime
  currentPeriodEnd DateTime
  period           String

  nextPaymentAt DateTime
  lastPaymentAt DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Credits {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  getReply  Int @default(5)
  getPickup Int @default(5)
  getAdvice Int @default(10)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model RefreshToken {
  id String @id @unique @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  token String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PLAN {
  BASIC
  PRO
  PREMIUM
}

enum PLAN_STATUS {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

model ReplyFeedback {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  text String

  isLiked    Boolean
  isDisliked Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@unique([userId, text])
}

model Feedback {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}
